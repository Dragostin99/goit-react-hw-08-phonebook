{"version":3,"file":"static/js/902.79945a39.chunk.js","mappings":"gNAgCA,IA1BqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAC3BC,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCF,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACLC,OAAO,MACPC,MAAM,QACNC,SAAUX,EACVY,OACEP,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CACLC,KAAK,UACLC,QAAS,WACPZ,GAASa,EAAAA,EAAAA,OACTlB,GAAU,EACZ,EAAES,SACH,eAOX,C,8CCdA,IAfuB,WACrB,OACEF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCF,EAAAA,EAAAA,KAACY,EAAAA,GAAW,CACVC,OAAO,MACPC,MAAM,MACNC,UAAU,uBACVC,aAAc,CAAC,EACfC,aAAa,uBACbC,YAAY,UACZC,SAAS,aAIjB,C,2HCTMC,EAAiB,SAAAC,GACrBC,QAAQC,IAAI,UAAWF,EACzB,EAgFA,UA9Ec,WACZ,IAAAG,GAA+BC,EAAAA,EAAAA,KAAvBC,EAAOF,EAAPE,QAASC,EAASH,EAATG,UAEX7B,GAAWC,EAAAA,EAAAA,MAUjB,OACE6B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA3B,SAAA,EACE0B,EAAAA,EAAAA,MAACE,EAAAA,EAAI,CACHC,KAAK,QACLC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,MAAO,CACLC,SAAU,IACVC,UAAW,GACXC,QAAS,GACTC,OAAQ,QAEVC,cAAe,CACbC,UAAU,GAEZC,SA5BW,SAAAC,GACf7C,GACE8C,EAAAA,EAAAA,IAAM,CACJC,MAAOF,EAAOE,MACdC,SAAUH,EAAOG,WAGvB,EAsBM1B,eAAgBA,EAChB2B,aAAa,MAAK7C,SAAA,EAElBF,EAAAA,EAAAA,KAAC8B,EAAAA,EAAAA,KAAS,CACRkB,MAAM,QACNjB,KAAK,QACLkB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,qCAEXjD,UAEFF,EAAAA,EAAAA,KAACoD,EAAAA,EAAK,CAAC3C,KAAK,QAAQ4C,YAAY,kCAGlCrD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAAA,KAAS,CACRkB,MAAM,WACNjB,KAAK,WACLkB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gCAEXjD,UAEFF,EAAAA,EAAAA,KAACoD,EAAAA,EAAAA,SAAc,CAACE,UAAW,OAG7BtD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAAA,KAAS,CACRI,WAAY,CACVqB,OAAQ,EACRtB,KAAM,IACN/B,UAEFF,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CAACC,KAAK,UAAU+C,SAAS,SAAQtD,SAAC,eAK5CwB,IAAW1B,EAAAA,EAAAA,KAACyD,EAAAA,EAAY,IACxB9B,IAAa3B,EAAAA,EAAAA,KAAC0D,EAAAA,EAAc,MAGnC,C,+ECrFajC,EAAqB,WAIhC,MAAO,CACLC,SAJc9B,EAAAA,EAAAA,IAAY+D,EAAAA,IAK1BhC,WAJgB/B,EAAAA,EAAAA,IAAYgE,EAAAA,IAMhC,C","sources":["components/error-message/ErrorMessage.js","components/loading-spinner/LoadingSpinner.js","components/pages/login/Login.js","hooks/useLoadingAndError.js"],"sourcesContent":["import { Button, Result } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectErrorMessage } from 'features/auth/selectors';\nimport { resetError } from 'features/auth/authSlice';\n\nconst ErrorMessage = () => {\n  const navigate = useNavigate();\n  const errorMessage = useSelector(selectErrorMessage);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"loading-container\">\n      <Result\n        status=\"404\"\n        title=\"ERROR\"\n        subTitle={errorMessage}\n        extra={\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              dispatch(resetError());\n              navigate(-1);\n            }}\n          >\n            Go Back\n          </Button>\n        }\n      />\n    </div>\n  );\n};\nexport default ErrorMessage;\n","import { ProgressBar } from 'react-loader-spinner';\n\nconst LoadingSpinner = () => {\n  return (\n    <div className=\"loading-container\">\n      <ProgressBar\n        height=\"120\"\n        width=\"120\"\n        ariaLabel=\"progress-bar-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"progress-bar-wrapper\"\n        borderColor=\"#F4442E\"\n        barColor=\"#51E5FF\"\n      />\n    </div>\n  );\n};\nexport default LoadingSpinner;\n","import { Button, Form, Input } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'features/auth/operations';\nimport { useLoadingAndError } from 'hooks/useLoadingAndError';\nimport ErrorMessage from 'components/error-message/ErrorMessage';\nimport LoadingSpinner from 'components/loading-spinner/LoadingSpinner';\n\nconst onFinishFailed = errorInfo => {\n  console.log('Failed:', errorInfo);\n};\n\nconst Login = () => {\n  const { isError, isLoading } = useLoadingAndError();\n\n  const dispatch = useDispatch();\n  const onFinish = values => {\n    dispatch(\n      login({\n        email: values.email,\n        password: values.password,\n      })\n    );\n  };\n\n  return (\n    <>\n      <Form\n        name=\"basic\"\n        labelCol={{\n          span: 8,\n        }}\n        wrapperCol={{\n          span: 16,\n        }}\n        style={{\n          maxWidth: 600,\n          marginTop: 30,\n          padding: 20,\n          margin: 'auto',\n        }}\n        initialValues={{\n          remember: true,\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label=\"Email\"\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your email address!',\n            },\n          ]}\n        >\n          <Input type=\"email\" placeholder=\"Please type email address!\" />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Password\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n        >\n          <Input.Password minLength={8} />\n        </Form.Item>\n\n        <Form.Item\n          wrapperCol={{\n            offset: 8,\n            span: 16,\n          }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\">\n            Login\n          </Button>\n        </Form.Item>\n      </Form>\n      {isError && <ErrorMessage />}\n      {isLoading && <LoadingSpinner />}\n    </>\n  );\n};\nexport default Login;\n","import { useSelector } from 'react-redux';\nimport { selectIsError, selectIsLoading } from 'features/auth/selectors';\n\nexport const useLoadingAndError = () => {\n  const isError = useSelector(selectIsError);\n  const isLoading = useSelector(selectIsLoading);\n\n  return {\n    isError,\n    isLoading,\n  };\n};\n"],"names":["navigate","useNavigate","errorMessage","useSelector","selectErrorMessage","dispatch","useDispatch","_jsx","className","children","Result","status","title","subTitle","extra","Button","type","onClick","resetError","ProgressBar","height","width","ariaLabel","wrapperStyle","wrapperClass","borderColor","barColor","onFinishFailed","errorInfo","console","log","_useLoadingAndError","useLoadingAndError","isError","isLoading","_jsxs","_Fragment","Form","name","labelCol","span","wrapperCol","style","maxWidth","marginTop","padding","margin","initialValues","remember","onFinish","values","login","email","password","autoComplete","label","rules","required","message","Input","placeholder","minLength","offset","htmlType","ErrorMessage","LoadingSpinner","selectIsError","selectIsLoading"],"sourceRoot":""}